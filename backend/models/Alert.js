const mongoose = require('mongoose');
const { ALERT_TYPES, ALERT_PRIORITIES, ALERT_STATUS } = require('../config/constants');

const alertSchema = new mongoose.Schema({
    type: {
        type: String,
        enum: Object.values(ALERT_TYPES),
        required: [true, 'Alert type is required']
    },
    priority: {
        type: String,
        enum: Object.values(ALERT_PRIORITIES),
        required: [true, 'Alert priority is required']
    },
    status: {
        type: String,
        enum: Object.values(ALERT_STATUS),
        default: ALERT_STATUS.ACTIVE
    },
    title: {
        type: String,
        required: [true, 'Alert title is required'],
        trim: true,
        maxlength: [200, 'Alert title cannot exceed 200 characters']
    },
    message: {
        type: String,
        required: [true, 'Alert message is required'],
        trim: true,
        maxlength: [1000, 'Alert message cannot exceed 1000 characters']
    },
    relatedEntity: {
        entityType: {
            type: String,
            enum: ['product', 'inventory', 'batch', 'warehouse', 'user'],
            required: [true, 'Entity type is required']
        },
        entityId: {
            type: mongoose.Schema.Types.ObjectId,
            required: [true, 'Entity ID is required']
        },
        entityName: {
            type: String,
            required: [true, 'Entity name is required']
        }
    },
    warehouseId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Warehouse',
        required: [true, 'Warehouse ID is required']
    },
    assignedTo: [{
        userId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        role: {
            type: String,
            required: true
        },
        notifiedAt: {
            type: Date
        },
        acknowledgedAt: {
            type: Date
        }
    }],
    expiryInfo: {
        expiryDate: { type: Date },
        daysToExpiry: { type: Number },
        quantity: { type: Number },
        batchNumber: { type: String }
    },
    stockInfo: {
        currentStock: { type: Number },
        minimumStock: { type: Number },
        reorderPoint: { type: Number }
    },
    temperatureInfo: {
        currentTemp: { type: Number },
        requiredRange: {
            min: { type: Number },
            max: { type: Number }
        },
        duration: { type: Number }, // minutes of breach
        sensorId: { type: String }
    },
    actions: [{
        action: {
            type: String,
            enum: ['acknowledge', 'resolve', 'escalate', 'dismiss', 'comment'],
            required: true
        },
        performedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        performedAt: {
            type: Date,
            default: Date.now
        },
        comment: { type: String },
        metadata: {
            ipAddress: { type: String },
            userAgent: { type: String }
        }
    }],
    escalation: {
        isEscalated: { type: Boolean, default: false },
        escalatedAt: { type: Date },
        escalatedTo: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        escalationReason: { type: String },
        escalationLevel: {
            type: Number,
            min: 1,
            max: 3,
            default: 1
        }
    },
    resolution: {
        isResolved: { type: Boolean, default: false },
        resolvedAt: { type: Date },
        resolvedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        resolution: { type: String },
        preventiveActions: [{ type: String }]
    },
    notifications: [{
        channel: {
            type: String,
            enum: ['email', 'sms', 'push', 'in-app'],
            required: true
        },
        recipient: { type: String, required: true },
        sentAt: { type: Date, required: true },
        delivered: { type: Boolean, default: false },
        deliveredAt: { type: Date },
        opened: { type: Boolean, default: false },
        openedAt: { type: Date }
    }],
    isAutoGenerated: {
        type: Boolean,
        default: true
    },
    source: {
        type: String,
        enum: ['system', 'user', 'sensor', 'api'],
        default: 'system'
    },
    tags: [{ type: String }],
    expiresAt: {
        type: Date,
        index: { expireAfterSeconds: 0 }
    }
}, {
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
});

// Indexes
alertSchema.index({ type: 1, status: 1, createdAt: -1 });
alertSchema.index({ warehouseId: 1, status: 1, priority: -1 });
alertSchema.index({ 'assignedTo.userId': 1, status: 1 });
alertSchema.index({ 'relatedEntity.entityType': 1, 'relatedEntity.entityId': 1 });
alertSchema.index({ createdAt: -1 });

// Virtual for alert age in hours
alertSchema.virtual('ageInHours').get(function() {
    return Math.floor((Date.now() - this.createdAt) / (1000 * 60 * 60));
});

// Static method to get active alerts for a warehouse
alertSchema.statics.getActiveAlertsForWarehouse = function(warehouseId, limit = 50) {
    return this.find({
        warehouseId,
        status: ALERT_STATUS.ACTIVE
    })
    .sort({ priority: -1, createdAt: -1 })
    .limit(limit)
    .populate('assignedTo.userId', 'fullName role')
    .populate('warehouseId', 'name code')
    .exec();
};

module.exports = mongoose.model('Alert', alertSchema);
